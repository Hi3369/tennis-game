#!/usr/bin/env python3
"""
ÂãïÁîªÁîüÊàê„Éë„Ç§„Éó„É©„Ç§„É≥Áµ±ÂêàÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà

„ÉÜ„Éã„Çπ„Ç≤„Éº„É†„ÅÆ„ÇΩ„Éº„Çπ„Ç≥„Éº„ÉâËß£Ë™¨ÂãïÁîª„ÇíËá™ÂãïÁîüÊàê„Åô„ÇãÂÖ®Â∑•Á®ã„Çí
„ÉØ„É≥„ÇØ„É™„ÉÉ„ÇØ„ÅßÂÆüË°å„Åô„Çã„É°„Ç§„É≥„Çπ„ÇØ„É™„Éó„Éà„Åß„Åô„ÄÇ

Âá¶ÁêÜ„Éï„É≠„Éº:
1. ÂøÖË¶Å„Å™„ÉÑ„Éº„É´„Éª„É©„Ç§„Éñ„É©„É™„ÅÆÁ¢∫Ë™ç
2. „Ç≥„Éº„Éâ„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„ÉàÁîüÊàê
3. Èü≥Â£∞„Éï„Ç°„Ç§„É´ÁîüÊàê
4. ÁîªÂÉè„É™„Çµ„Ç§„Ç∫Âá¶ÁêÜ
5. ÂãïÁîª„ÅÆÁ∑®ÈõÜ„ÉªÂá∫Âäõ

„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÇíÂÆüË°å„Åô„Çã„Å†„Åë„Åß„ÄÅÂÆåÂÖ®„Å™Ëß£Ë™¨ÂãïÁîª„ÅåËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åô„ÄÇ
"""

import os          # „Éï„Ç°„Ç§„É´„Ç∑„Çπ„ÉÜ„É†Êìç‰ΩúÁî®
import sys         # „Ç∑„Çπ„ÉÜ„É†Êìç‰Ωú„Å®„Éó„É≠„Çª„ÇπÂà∂Âæ°Áî®
import subprocess  # Â§ñÈÉ®„Çπ„ÇØ„É™„Éó„ÉàÂÆüË°åÁî®

def check_requirements():
    """
    ÂøÖË¶Å„Å™„ÉÑ„Éº„É´„Å®„É©„Ç§„Éñ„É©„É™„ÅÆÂ≠òÂú®Á¢∫Ë™ç

    ÂãïÁîªÁîüÊàê„Å´ÂøÖË¶Å„Å™ÂÖ®„Å¶„ÅÆ‰æùÂ≠òÈñ¢‰øÇ„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„ÄÅ
    ‰∏çË∂≥„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÂÖ∑‰ΩìÁöÑ„Å™„Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï„ÇíÊ°àÂÜÖ„Åó„Åæ„Åô„ÄÇ

    Returns:
        bool: ÂÖ®„Å¶„ÅÆË¶Å‰ª∂„ÅåÊ∫Ä„Åü„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàTrue
    """
    print("Âãï‰ΩúË¶Å‰ª∂„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...")

    # PIL/PillowÔºàÁîªÂÉèÂá¶ÁêÜ„É©„Ç§„Éñ„É©„É™Ôºâ„ÅÆÁ¢∫Ë™ç
    try:
        import PIL
        print("‚úì PIL/Pillow „ÅåÂà©Áî®ÂèØËÉΩ„Åß„Åô")
    except ImportError:
        print("‚úó PIL/Pillow „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        return False

    # gTTSÔºàGoogle Text-to-SpeechÔºâ„ÅÆÁ¢∫Ë™ç
    try:
        import gtts
        print("‚úì gTTS „ÅåÂà©Áî®ÂèØËÉΩ„Åß„Åô")
    except ImportError:
        print("‚úó gTTS „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        return False

    # ffmpegÔºàÂãïÁîªÁ∑®ÈõÜ„ÉÑ„Éº„É´Ôºâ„ÅÆÁ¢∫Ë™ç
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        print("‚úì ffmpeg „ÅåÂà©Áî®ÂèØËÉΩ„Åß„Åô")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚úó ffmpeg „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì - ÂãïÁîªÁîüÊàê„Åå„Åß„Åç„Åæ„Åõ„Çì")
        print("  „Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï: sudo apt-get install ffmpeg")
        return False

    return True

def run_pipeline():
    """
    ÂãïÁîªÁîüÊàê„Éë„Ç§„Éó„É©„Ç§„É≥„ÅÆÂÆüË°å

    ÂÖ®„Å¶„ÅÆÂ∑•Á®ã„ÇíÈ†ÜÊ¨°ÂÆüË°å„Åó„Å¶„ÄÅÊúÄÁµÇÁöÑ„Å™Ëß£Ë™¨ÂãïÁîª„ÇíÁîüÊàê„Åó„Åæ„Åô„ÄÇ
    ÂêÑ„Çπ„ÉÜ„ÉÉ„Éó„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØÂá¶ÁêÜ„Çí‰∏≠Êñ≠„Åó„ÄÅ„Ç®„É©„ÉºÂÜÖÂÆπ„ÇíÂ†±Âëä„Åó„Åæ„Åô„ÄÇ

    Returns:
        bool: ÂÖ®„Å¶„ÅÆÂá¶ÁêÜ„ÅåÊàêÂäü„Åó„ÅüÂ†¥ÂêàTrue
    """
    print("\n" + "="*60)
    print("„ÉÜ„Éã„Çπ„Ç≤„Éº„É† „Ç≥„Éº„ÉâËß£Ë™¨ÂãïÁîª Ëá™ÂãïÁîüÊàê„Ç∑„Çπ„ÉÜ„É†")
    print("="*60)

    # Check if we have all files
    required_files = [
        'index.html',
        'code_to_image_simple.py',
        'generate_screenshots.py',
        'generate_audio_gtts.py',
        'resize_screenshots.py',
        'create_video_resized.py'
    ]

    missing_files = [f for f in required_files if not os.path.exists(f)]
    if missing_files:
        print(f"Missing files: {missing_files}")
        return False

    print("\nAll required files present ‚úì")

    # Step 1: Generate screenshots
    print("\n1. Generating screenshots...")
    try:
        subprocess.run([sys.executable, 'generate_screenshots.py'], check=True)
        print("‚úì Screenshots generated")
    except subprocess.CalledProcessError as e:
        print(f"‚úó Screenshot generation failed: {e}")
        return False

    # Step 2: Generate audio
    print("\n2. Generating audio files...")
    try:
        subprocess.run([sys.executable, 'generate_audio_gtts.py'], check=True)
        print("‚úì Audio files generated")
    except subprocess.CalledProcessError as e:
        print(f"‚úó Audio generation failed: {e}")
        return False

    # Step 3: Resize screenshots
    print("\n3. Resizing screenshots...")
    try:
        subprocess.run([sys.executable, 'resize_screenshots.py'], check=True)
        print("‚úì Screenshots resized")
    except subprocess.CalledProcessError as e:
        print(f"‚úó Screenshot resizing failed: {e}")
        return False

    # Step 4: Create video (if ffmpeg available)
    print("\n4. Creating video...")
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        subprocess.run([sys.executable, 'create_video_resized.py'], check=True)
        print("‚úì Video created successfully!")

        # Show final video info
        if os.path.exists('tennis_game_tutorial.mp4'):
            size = os.path.getsize('tennis_game_tutorial.mp4') / (1024 * 1024)
            print(f"  Final video: tennis_game_tutorial.mp4 ({size:.2f} MB)")

    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚úó Video creation skipped - ffmpeg not available")
        print("  Install ffmpeg to complete video generation")
        return False

    return True

def show_summary():
    """Show summary of generated files"""
    print("\n" + "="*60)
    print("GENERATED FILES SUMMARY")
    print("="*60)

    # Screenshots
    if os.path.exists('pic'):
        screenshots = [f for f in os.listdir('pic') if f.endswith('.png')]
        print(f"\nüì∏ Screenshots (pic/): {len(screenshots)} files")
        for f in sorted(screenshots)[:3]:
            print(f"   - {f}")
        if len(screenshots) > 3:
            print(f"   ... and {len(screenshots) - 3} more")

    # Resized screenshots
    if os.path.exists('pic_resized'):
        resized = [f for f in os.listdir('pic_resized') if f.endswith('.png')]
        print(f"\nüñºÔ∏è  Resized screenshots (pic_resized/): {len(resized)} files")

    # Audio files
    if os.path.exists('audio'):
        audio_files = [f for f in os.listdir('audio') if f.endswith('.mp3')]
        print(f"\nüîä Audio files (audio/): {len(audio_files)} files")
        total_size = sum(os.path.getsize(f'audio/{f}') for f in audio_files)
        print(f"   Total audio size: {total_size / (1024 * 1024):.2f} MB")

    # Final video
    if os.path.exists('tennis_game_tutorial.mp4'):
        size = os.path.getsize('tennis_game_tutorial.mp4') / (1024 * 1024)
        print(f"\nüé• Final video: tennis_game_tutorial.mp4 ({size:.2f} MB)")

    print("\n" + "="*60)
    print("VIDEO GENERATION COMPLETE!")
    print("="*60)

    # Instructions
    print("\nTo view the video:")
    print("  Open tennis_game_tutorial.mp4 with any video player")

    print("\nTo customize:")
    print("  - Edit script.txt to modify narration")
    print("  - Run generate_audio_gtts.py to regenerate audio")
    print("  - Run create_video_resized.py to regenerate video")

if __name__ == '__main__':
    if not check_requirements():
        print("\nPlease install missing requirements and try again.")
        sys.exit(1)

    if run_pipeline():
        show_summary()
    else:
        print("\nPipeline completed with some errors. Check the output above.")
        show_summary()
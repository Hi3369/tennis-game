# HTML構造とメタデータ（行番号範囲：1-66）
[実際の表示時間: 12.0秒]
[表示行: 1-66]
[画像ファイル: pic/scene01_html_structure.png]
[音声ファイル: audio/scene01_narration.mp3]

このテニスゲームは、HTML5のCanvasを使用したクラシックなPongスタイルのゲームです。
HTMLの基本構造では、meta要素でビューポートとエンコーディングを設定し、
日本語タイトル「クラシックテニスゲーム」を表示します。
CSSスタイルで全体のレイアウトとデザインを定義しています。

# CSSスタイル（行番号範囲：7-65）
[実際の表示時間: 15.0秒]
[表示行: 7-65]
[画像ファイル: pic/scene02_css_styles.png]
[音声ファイル: audio/scene02_narration.mp3]

CSSでは、ダークテーマのデザインを採用しています。
bodyは黒背景に設定し、Flexboxレイアウトでゲームをページ中央に配置します。
gameCanvasには白いボーダーを付け、スコア表示には等幅フォント「Courier New」を使用しています。
ボタンとセレクトボックスには統一されたスタイルを適用し、ホバー効果も実装しています。

# HTML構造（行番号範囲：67-82）
[実際の表示時間: 10.0秒]
[表示行: 67-82]
[画像ファイル: pic/scene03_html_body.png]
[音声ファイル: audio/scene03_narration.mp3]

HTML本体部分では、スコア表示、800×400ピクセルのCanvas要素、
操作説明、難易度選択、ゲーム開始ボタンを配置しています。
プレイヤーは矢印キーの上下でパドルを操作し、
AIが自動でコンピューターのパドルを制御します。

# JavaScript初期設定（行番号範囲：84-99）
[実際の表示時間: 12.0秒]
[表示行: 84-99]
[画像ファイル: pic/scene04_js_initialization.png]
[音声ファイル: audio/scene04_narration.mp3]

JavaScriptでは、まずHTML要素への参照を取得します。
canvas、コンテキスト、スコア表示、開始ボタン、難易度選択の要素を取得し、
ゲームの基本設定を定義するgameオブジェクトを作成します。
ボール速度、パドル速度、AI設定などの重要なパラメーターを管理しています。

# ゲームオブジェクト（行番号範囲：90-128）
[実際の表示時間: 18.0秒]
[表示行: 90-128]
[画像ファイル: pic/scene05_game_objects.png]
[音声ファイル: audio/scene05_narration.mp3]

プレイヤー、AI、ボールの各オブジェクトを定義します。
プレイヤーは画面右側、AIは左側に配置し、それぞれ位置、サイズ、スコアを管理します。
ボールオブジェクトには、位置、速度、軌跡表示用の配列を含めています。
これらのオブジェクトがゲームの状態を管理する中核となります。

# 描画関数（行番号範囲：129-157）
[実際の表示時間: 15.0秒]
[表示行: 129-157]
[画像ファイル: pic/scene06_drawing_functions.png]
[音声ファイル: audio/scene06_narration.mp3]

描画関数群では、ゲーム画面の各要素を描画します。
drawPaddle関数でパドルを白い矩形として描画し、
drawBall関数ではボールの軌跡効果も含めて円を描画します。
drawNet関数は、画面中央に点線のネットを描画し、
クラシックなPongゲームの見た目を再現しています。

# AI制御システム（行番号範囲：159-178）
[実際の表示時間: 20.0秒]
[表示行: 159-178]
[画像ファイル: pic/scene07_ai_system.png]
[音声ファイル: audio/scene07_narration.mp3]

AI制御システムは、非常に高度な予測システムを実装しています。
ボールがAI側に向かっているとき、ボールの軌道を予測計算し、
エラー率を加えることで人間らしい不完全性を再現しています。
AIの反応距離や速度は難易度設定によって調整され、
リアルな対戦相手としての体験を提供します。

# プレイヤー制御とボール物理（行番号範囲：180-233）
[実際の表示時間: 25.0秒]
[表示行: 180-233]
[画像ファイル: pic/scene08_player_ball_physics.png]
[音声ファイル: audio/scene08_narration.mp3]

プレイヤー制御では、矢印キーの入力に基づいてパドルを移動させます。
ボール物理システムでは、軌跡効果、壁での反射、パドルとの衝突判定を処理します。
パドル衝突時には、衝突位置に応じてボールの角度が変化し、
速度も1.05倍に増加することで、ゲームの緊張感を高めています。
ボールが画面端を通り抜けると、対応するプレイヤーのスコアが増加します。

# スコア管理とゲーム終了（行番号範囲：235-258）
[実際の表示時間: 15.0秒]
[表示行: 235-258]
[画像ファイル: pic/scene09_score_management.png]
[音声ファイル: audio/scene09_narration.mp3]

resetBall関数は、得点後にボールを画面中央にリセットし、
ランダムな方向と角度で新しいラウンドを開始します。
updateScore関数では、スコア表示を更新し、
11点に達したプレイヤーが勝利となります。
勝利時には日本語でメッセージを表示し、ゲームをリセットします。

# メインループと描画（行番号範囲：260-279）
[実際の表示時間: 12.0秒]
[表示行: 260-279]
[画像ファイル: pic/scene10_main_loop.png]
[音声ファイル: audio/scene10_narration.mp3]

draw関数は、半透明な黒い矩形で軌跡効果を作り、
その上にネット、パドル、ボールを順序良く描画します。
gameLoop関数は、ゲームが実行中の間、
プレイヤー更新、AI更新、ボール更新、描画を順次実行し、
requestAnimationFrameで滑らかなアニメーションを実現します。

# キーボード入力処理（行番号範囲：281-303）
[実際の表示時間: 12.0秒]
[表示行: 281-303]
[画像ファイル: pic/scene11_keyboard_input.png]
[音声ファイル: audio/scene11_narration.mp3]

キーボード入力処理では、keydownとkeyupイベントリスナーを設定しています。
矢印キーの上下でプレイヤーパドルの動作フラグを制御し、
preventDefaultでデフォルトのスクロール動作を防止します。
この仕組みにより、滑らかで応答性の良いパドル操作を実現しています。

# 難易度設定とゲーム開始（行番号範囲：305-338）
[実際の表示時間: 18.0秒]
[表示行: 305-338]
[画像ファイル: pic/scene12_difficulty_start.png]
[音声ファイル: audio/scene12_narration.mp3]

難易度設定システムでは、「かんたん」「ふつう」「むずかしい」の3段階を用意しています。
各難易度でAIの速度、反応距離、エラー率が変化し、
プレイヤーのスキルレベルに応じた挑戦を提供します。
ゲーム開始ボタンをクリックすると、設定を適用してゲームループを開始し、
UI要素を非表示にしてゲームに集中できる環境を作ります。